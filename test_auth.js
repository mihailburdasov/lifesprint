// Test script for Supabase authentication
// Run this script with Node.js to test the authentication flow

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Initialize Supabase client
const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Test user credentials - use generic test credentials
const testUser = {
  email: 'mihail.burdasov@gmail.com',
  password: 'Reset007!',
  name: 'Mihail',
  telegramNickname: '@testuser'
};

// Test functions
async function testSignUp() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
  const { data, error } = await supabase.auth.signUp({
    email: testUser.email,
    password: testUser.password,
  });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    return null;
  }

  console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', data.user.id);
  
  // Create profile
  const { data: profileData, error: profileError } = await supabase
    .from('profiles')
    .insert([
      {
        id: data.user.id,
        name: testUser.name,
        email: testUser.email,
        telegram_nickname: testUser.telegramNickname,
      },
    ])
    .select();

  if (profileError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
    return null;
  }

  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', profileData);
  return data.user;
}

async function testSignIn() {
  console.log('üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...');
  const { data, error } = await supabase.auth.signInWithPassword({
    email: testUser.email,
    password: testUser.password,
  });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
    return null;
  }

  console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', data.user.id);
  return data.user;
}

async function testGetCurrentUser() {
  console.log('üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  const { data, error } = await supabase.auth.getUser();

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    return null;
  }

  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', data.user.id);
  
  // Get profile
  const { data: profileData, error: profileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('id', data.user.id)
    .single();

  if (profileError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError.message);
    return null;
  }

  console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω:', profileData);
  return data.user;
}

async function testResetPassword() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è...');
  const { error } = await supabase.auth.resetPasswordForEmail(testUser.email, {
    redirectTo: `${process.env.REACT_APP_URL || 'http://localhost:3000'}/reset-password`,
  });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error.message);
    return false;
  }

  console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  return true;
}

async function testUpdatePassword() {
  console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è...');
  const { error } = await supabase.auth.updateUser({
    password: 'NewPassword123!',
  });

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error.message);
    return false;
  }

  console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
  return true;
}

async function testSignOut() {
  console.log('üö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞...');
  const { error } = await supabase.auth.signOut();

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error.message);
    return false;
  }

  console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  return true;
}

// Run tests
async function runTests() {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase...');
    
    // Sign up
    const user = await testSignUp();
    if (!user) {
      console.log('‚ÑπÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...');
    }

    // Sign in
    const signedInUser = await testSignIn();
    if (!signedInUser) {
      console.error('‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã');
      return;
    }

    // Get current user
    const currentUser = await testGetCurrentUser();
    if (!currentUser) {
      console.error('‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã');
      return;
    }

    // Reset password (this will send an email)
    const resetPasswordResult = await testResetPassword();
    console.log(`${resetPasswordResult ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω:`, resetPasswordResult);

    // Update password (this will only work if the user is signed in)
    const updatePasswordResult = await testUpdatePassword();
    console.log(`${updatePasswordResult ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω:`, updatePasswordResult);

    // Sign out
    const signOutResult = await testSignOut();
    console.log(`${signOutResult ? '‚úÖ' : '‚ùå'} –¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:`, signOutResult);

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// Run the tests
runTests();
