import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { Sidebar } from '../../../features/dashboard/components';
import { AudioPlayer, Button } from '../../../core/components';
import { useProgress } from '../context';
import { FaLock } from 'react-icons/fa';
import { getDailyContent, getMotivationalPhrase } from '../../../data/dailyContent';
import { useContentService } from '../hooks/useContentService';

interface DayParams {
  dayNumber: string;
  [key: string]: string;
}

const DayPage: React.FC = () => {
  const { dayNumber: dayNumberParam } = useParams<DayParams>();
  const navigate = useNavigate();
  const { progress, updateDayProgress, updateWeekReflection, isReflectionDay: checkReflectionDay, getDayCompletion, isDayAccessible } = useProgress();
  const { formatDate, getDayTitle } = useContentService();
  
  // Add a counter to force re-render when reflection data changes
  const [updateCounter, setUpdateCounter] = useState(0);
  
  const dayNumber = parseInt(dayNumberParam || '1', 10);
  const isReflection = checkReflectionDay(dayNumber);
  const weekNumber = Math.ceil(dayNumber / 7);
  const isAccessible = isDayAccessible(dayNumber);
  
  // Get day date
  const dayDate = new Date(progress.startDate);
  dayDate.setDate(dayDate.getDate() + dayNumber - 1);
  
  // Get day data
  const dayData = progress.days[dayNumber] || {
    completed: false,
    gratitude: ['', '', ''],
    achievements: ['', '', ''],
    goals: [
      { text: '', completed: false },
      { text: '', completed: false },
      { text: '', completed: false }
    ],
    exerciseCompleted: false
  };
  
  // Get week reflection data if it's a reflection day
  const reflectionData = isReflection ? (progress.weekReflections[weekNumber] || {
    gratitudeSelf: '',
    gratitudeOthers: '',
    gratitudeWorld: '',
    achievements: ['', '', ''],
    improvements: ['', '', ''],
    insights: ['', '', ''],
    rules: ['', '', ''],
    exerciseCompleted: false
  }) : null;
  
  // Handle navigation to previous/next day
  const goToPreviousDay = () => {
    if (dayNumber > 1) {
      navigate(`/day/${dayNumber - 1}`);
    }
  };
  
  const goToNextDay = () => {
    if (dayNumber < 31) {
      navigate(`/day/${dayNumber + 1}`);
    }
  };
  
  // Handle regular day input changes
  const handleGratitudeChange = (index: number, value: string) => {
    const newGratitude = [...dayData.gratitude];
    newGratitude[index] = value;
    updateDayProgress(dayNumber, { gratitude: newGratitude });
  };
  
  const handleAchievementChange = (index: number, value: string) => {
    const newAchievements = [...dayData.achievements];
    newAchievements[index] = value;
    updateDayProgress(dayNumber, { achievements: newAchievements });
  };
  
  const handleGoalChange = (index: number, value: string) => {
    const newGoals = [...dayData.goals];
    newGoals[index] = { ...newGoals[index], text: value };
    updateDayProgress(dayNumber, { goals: newGoals });
  };
  
  const handleGoalToggle = (index: number) => {
    const newGoals = [...dayData.goals];
    newGoals[index] = { ...newGoals[index], completed: !newGoals[index].completed };
    updateDayProgress(dayNumber, { goals: newGoals });
  };
  
  const handleExerciseComplete = () => {
    updateDayProgress(dayNumber, { exerciseCompleted: !dayData.exerciseCompleted });
  };
  
  // Handle reflection day input changes
  const handleReflectionGratitudeChange = (type: 'self' | 'others' | 'world', value: string) => {
    if (!reflectionData) return;
    
    if (type === 'self') {
      updateWeekReflection(weekNumber, { gratitudeSelf: value });
      setUpdateCounter(prev => prev + 1); // Force re-render
    } else if (type === 'others') {
      updateWeekReflection(weekNumber, { gratitudeOthers: value });
      setUpdateCounter(prev => prev + 1); // Force re-render
    } else if (type === 'world') {
      updateWeekReflection(weekNumber, { gratitudeWorld: value });
      setUpdateCounter(prev => prev + 1); // Force re-render
    }
  };
  
  const handleReflectionAchievementChange = (index: number, value: string) => {
    if (!reflectionData) return;
    
    const newAchievements = [...reflectionData.achievements];
    newAchievements[index] = value;
    updateWeekReflection(weekNumber, { achievements: newAchievements });
    setUpdateCounter(prev => prev + 1); // Force re-render
  };
  
  const handleReflectionImprovementChange = (index: number, value: string) => {
    if (!reflectionData) return;
    
    const newImprovements = [...reflectionData.improvements];
    newImprovements[index] = value;
    updateWeekReflection(weekNumber, { improvements: newImprovements });
    setUpdateCounter(prev => prev + 1); // Force re-render
  };
  
  const handleReflectionInsightChange = (index: number, value: string) => {
    if (!reflectionData) return;
    
    const newInsights = [...reflectionData.insights];
    newInsights[index] = value;
    updateWeekReflection(weekNumber, { insights: newInsights });
    setUpdateCounter(prev => prev + 1); // Force re-render
  };
  
  const handleReflectionRuleChange = (index: number, value: string) => {
    if (!reflectionData) return;
    
    const newRules = [...reflectionData.rules];
    newRules[index] = value;
    updateWeekReflection(weekNumber, { rules: newRules });
    setUpdateCounter(prev => prev + 1); // Force re-render
  };
  
  const handleReflectionExerciseComplete = () => {
    if (!reflectionData) return;
    
    updateWeekReflection(weekNumber, { exerciseCompleted: !reflectionData.exerciseCompleted });
    setUpdateCounter(prev => prev + 1); // Force re-render
  };
  
  // Get daily content
  const dailyContent = getDailyContent(dayNumber);
  
  // Render regular day content
  const renderRegularDayContent = () => {
    return (
      <div className="day-content space-y-6 sm:space-y-8">
        {/* Thought of the day */}
        <div className="thought-of-day">
          <h3 className="text-base sm:text-lg font-medium mb-2">
            {dailyContent.thought.author 
              ? `#–º—ã—Å–ª—å–¥–Ω—è –æ—Ç ${dailyContent.thought.author}:` 
              : '#–º—ã—Å–ª—å–¥–Ω—è'}
          </h3>
          <div className="bg-gray-100 dark:bg-gray-800 p-3 sm:p-4 rounded-md italic text-sm sm:text-base">
            {dailyContent.thought.text}
          </div>
        </div>
        
        {/* Gratitude Journal */}
        <div className="gratitude-journal">
          <h3 className="text-base sm:text-lg font-medium mb-2">–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ó–∞ —á—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞?
          </p>
          
          <div className="space-y-3">
            {dayData.gratitude.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2">üôè</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleGratitudeChange(index, e.target.value)}
                  placeholder="–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞"
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Achievements */}
        <div className="achievements">
          <h3 className="text-base sm:text-lg font-medium mb-2">–ö–æ–ø–∏–ª–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —è –º–æ–≥—É –≥–æ—Ä–¥–∏—Ç—å—Å—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞?
          </p>
          
          <div className="space-y-3">
            {dayData.achievements.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2">üòé</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleAchievementChange(index, e.target.value)}
                  placeholder="–Ø –≥–æ—Ä–∂—É—Å—å —Å–æ–±–æ–π"
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Goals */}
        <div className="goals">
          <h3 className="text-base sm:text-lg font-medium mb-2">–¶–µ–ª–µ–ø–æ–ª–∞–≥–∞–Ω–∏–µ</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —è –ø–æ—Å—Ç–∞–≤–ª—é –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –Ω–∞ –¥–µ–Ω—å?
          </p>
          
          <div className="space-y-3">
            {dayData.goals.map((goal, index) => (
              <div key={index} className="flex items-center">
                <input
                  type="checkbox"
                  checked={goal.completed}
                  onChange={() => handleGoalToggle(index)}
                  className="checkbox mr-3"
                />
                <input
                  type="text"
                  value={goal.text}
                  onChange={(e) => handleGoalChange(index, e.target.value)}
                  placeholder={`–ú–æ—è ${index + 1} –∑–∞–¥–∞—á–∞`}
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Exercise */}
        <div className="exercise">
          <h3 className="text-base sm:text-lg font-medium mb-2">#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ_–Ω–∞_–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å</h3>
          <div className="bg-gray-100 dark:bg-gray-800 p-3 sm:p-4 rounded-md mb-3 text-sm sm:text-base">
            {dailyContent.exercise}
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={dayData.exerciseCompleted}
              onChange={handleExerciseComplete}
              className="checkbox mr-3"
            />
            <span>–Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</span>
          </div>
        </div>
      </div>
    );
  };
  
  // Render reflection day content
  const renderReflectionDayContent = () => {
    if (!reflectionData) return null;
    
    return (
      <div className="reflection-content space-y-6 sm:space-y-8">
        {/* Thought of the day */}
        <div className="thought-of-day">
          <h3 className="text-base sm:text-lg font-medium mb-2">
            {dailyContent.thought.author 
              ? `#–º—ã—Å–ª—å–¥–Ω—è –æ—Ç ${dailyContent.thought.author}:` 
              : '#–º—ã—Å–ª—å–¥–Ω—è'}
          </h3>
          <div className="bg-gray-100 dark:bg-gray-800 p-3 sm:p-4 rounded-md italic text-sm sm:text-base">
            {dailyContent.thought.text}
          </div>
        </div>
        
        {/* Gratitude Journal */}
        <div className="gratitude-journal">
          <h3 className="text-base sm:text-lg font-medium mb-2">–î–Ω–µ–≤–Ω–∏–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ó–∞ —á—Ç–æ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —è –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω —Å–µ–±–µ, –æ–∫—Ä—É–∂–∞—é—â–∏–º, –º–∏—Ä—É?
          </p>
          
          <div className="space-y-3">
            <div className="flex items-center">
              <span className="mr-2">üôè</span>
              <input
                type="text"
                value={reflectionData.gratitudeSelf}
                onChange={(e) => handleReflectionGratitudeChange('self', e.target.value)}
                placeholder="–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é —Å–µ–±—è –∑–∞"
                className="input flex-1"
              />
            </div>
            <div className="flex items-center">
              <span className="mr-2">üôè</span>
              <input
                type="text"
                value={reflectionData.gratitudeOthers}
                onChange={(e) => handleReflectionGratitudeChange('others', e.target.value)}
                placeholder="–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –∑–∞"
                className="input flex-1"
              />
            </div>
            <div className="flex items-center">
              <span className="mr-2">üôè</span>
              <input
                type="text"
                value={reflectionData.gratitudeWorld}
                onChange={(e) => handleReflectionGratitudeChange('world', e.target.value)}
                placeholder="–Ø –±–ª–∞–≥–æ–¥–∞—Ä—é –º–∏—Ä –∑–∞"
                className="input flex-1"
              />
            </div>
          </div>
        </div>
        
        {/* Weekly Results */}
        <div className="weekly-results">
          <h3 className="text-base sm:text-lg font-medium mb-2">–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ß—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?
          </p>
          
          <div className="space-y-3 mb-6">
            {reflectionData.achievements.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2 text-green-500">‚úì</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleReflectionAchievementChange(index, e.target.value)}
                  placeholder={`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${index + 1}`}
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
          
          <h3 className="text-base sm:text-lg font-medium mb-2">–ú–æ—è –∑–æ–Ω–∞ —Ä–æ—Å—Ç–∞</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?
          </p>
          
          <div className="space-y-3">
            {reflectionData.improvements.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2 text-red-500">?</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleReflectionImprovementChange(index, e.target.value)}
                  placeholder={`–£–ª—É—á—à–µ–Ω–∏–µ ${index + 1}`}
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Insights */}
        <div className="insights">
          <h3 className="text-base sm:text-lg font-medium mb-2">–ú–æ–∏ –æ–∑–∞—Ä–µ–Ω–∏—è</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ö–∞–∫–∏–µ —É—Ä–æ–∫–∏ —è –ø–æ–ª—É—á–∏–ª –∏–∑ —Å–æ–±—ã—Ç–∏–π (—É—Å–ø–µ—Ö–æ–≤, –æ—à–∏–±–æ–∫, –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è)?
          </p>
          
          <div className="space-y-3">
            {reflectionData.insights.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2 text-primary">!</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleReflectionInsightChange(index, e.target.value)}
                  placeholder={`–û–∑–∞—Ä–µ–Ω–∏–µ ${index + 1}`}
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Updated Rules */}
        <div className="rules">
          <h3 className="text-base sm:text-lg font-medium mb-2">–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h3>
          <p className="text-sm text-text-light-light dark:text-text-light-dark mb-3">
            –ß—Ç–æ —è —É–ª—É—á—à—É –≤ —Å–µ–±–µ –∏–ª–∏ —Å–≤–æ—ë–º –ø–æ–¥—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?
          </p>
          
          <div className="space-y-3">
            {reflectionData.rules.map((item, index) => (
              <div key={index} className="flex items-center">
                <span className="mr-2 text-blue-500">üìò</span>
                <input
                  type="text"
                  value={item}
                  onChange={(e) => handleReflectionRuleChange(index, e.target.value)}
                  placeholder={`–ü—Ä–∞–≤–∏–ª–æ ${index + 1}`}
                  className="input flex-1"
                />
              </div>
            ))}
          </div>
        </div>
        
        {/* Exercise */}
        <div className="exercise">
          <h3 className="text-base sm:text-lg font-medium mb-2">#—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</h3>
          <div className="bg-gray-100 dark:bg-gray-800 p-3 sm:p-4 rounded-md mb-3 text-sm sm:text-base">
            {dailyContent.exercise}
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              checked={reflectionData.exerciseCompleted}
              onChange={handleReflectionExerciseComplete}
              className="checkbox mr-3"
            />
            <span>–Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</span>
          </div>
        </div>
        
        {/* Motivational Phrase */}
        <div className="motivational-phrase text-center py-4">
          <h3 className="text-lg sm:text-xl font-bold text-primary">{getMotivationalPhrase(weekNumber)}</h3>
        </div>
      </div>
    );
  };
  
  // Check if this is a bonus day (days 29-31)
  const isBonusDay = dayNumber >= 29 && dayNumber <= 31;
  
  // Render bonus day content
  const renderBonusDayContent = () => {
    return (
      <div className="bonus-day-content flex flex-col items-center justify-center py-12 text-center">
        <h2 className="text-2xl sm:text-3xl font-bold mb-6">–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ</h2>
        <p className="text-lg text-text-light-light dark:text-text-light-dark mb-8">
          –ë–æ–Ω—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.
        </p>
        <Link to="/">
          <Button variant="primary" size="lg">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </Link>
      </div>
    );
  };

  // Render access denied content
  const renderAccessDeniedContent = () => {
    return (
      <div className="access-denied flex flex-col items-center justify-center py-12 text-center">
        <div className="mb-6 text-gray-400">
          <FaLock size={64} />
        </div>
        <h2 className="text-2xl sm:text-3xl font-bold mb-6">–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞</h2>
        <p className="text-lg text-text-light-light dark:text-text-light-dark mb-8">
          –≠—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ.
        </p>
        <Link to="/">
          <Button variant="primary" size="lg">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </Link>
      </div>
    );
  };

  return (
    <div className="day-page flex min-h-screen bg-background-light dark:bg-background-dark">
      <Sidebar />
      
      <div className="content flex-1 md:ml-64 p-3 sm:p-4 md:p-6 pt-20 md:pt-6">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-4 sm:mb-6 space-y-3 sm:space-y-0">
          {dayNumber > 1 && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={goToPreviousDay}
              className="w-full sm:w-auto"
            >
              –ü—Ä–µ–¥. –¥–µ–Ω—å
            </Button>
          )}
          
          <div className="flex flex-col items-center">
            <h1 className="text-xl sm:text-2xl font-bold text-center">
              {isBonusDay ? `–ë–æ–Ω—É—Å–Ω—ã–π –¥–µ–Ω—å ${dayNumber - 28}` : `–î–µ–Ω—å ${dayNumber}: ${getDayTitle(dayNumber)}`}
              <span className="block text-base sm:text-lg font-normal text-text-light-light dark:text-text-light-dark">
                ({formatDate(dayDate)})
              </span>
            </h1>
            
            <div className="mt-2 flex items-center">
              <div className="w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center mr-3">
                {(() => {
                  const dayCompletion = getDayCompletion(dayNumber);
                  console.log(`Day ${dayNumber} completion: ${dayCompletion}%`);
                  return (
                    <div 
                      className="w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium"
                      style={{
                        background: `conic-gradient(#4F46E5 ${dayCompletion}%, #f3f4f6 0)`,
                        color: dayCompletion > 50 ? 'white' : 'inherit'
                      }}
                    >
                      {dayCompletion}%
                    </div>
                  );
                })()}
              </div>
              <div className="text-sm text-text-light-light dark:text-text-light-dark">
                –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–Ω—è
              </div>
            </div>
          </div>
          
          <Button 
            variant="outline" 
            size="sm"
            onClick={goToNextDay}
            disabled={dayNumber >= 31}
            className="w-full sm:w-auto"
          >
            –°–ª–µ–¥. –¥–µ–Ω—å
          </Button>
        </div>
        
        <div className="audio-player-container mb-4 sm:mb-6">
          <AudioPlayer 
            src={dailyContent.audioSrc} 
            className="w-full"
          />
        </div>
        
        {isReflection ? renderReflectionDayContent() : renderRegularDayContent()}
        
        {/* Show "Go to Main" button only when the day is filled */}
        {((isReflection && reflectionData && 
           reflectionData.gratitudeSelf && 
           reflectionData.gratitudeOthers && 
           reflectionData.gratitudeWorld && 
           reflectionData.achievements.some(a => a) && 
           reflectionData.improvements.some(i => i) && 
           reflectionData.insights.some(i => i) && 
           reflectionData.rules.some(r => r)) || 
          (!isReflection && 
           dayData.gratitude.some(g => g) && 
           dayData.achievements.some(a => a) && 
           dayData.goals.some(g => g.text))) && (
          <div className="mt-8 text-center">
            <Link to="/">
              <Button variant="outline">
                –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default DayPage;
