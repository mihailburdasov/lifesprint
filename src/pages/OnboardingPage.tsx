import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import Button from '../components/common/Button';

const OnboardingPage: React.FC = () => {
  const navigate = useNavigate();
  const [currentSlide, setCurrentSlide] = useState(0);
  const [touchStart, setTouchStart] = useState<number | null>(null);
  const [touchEnd, setTouchEnd] = useState<number | null>(null);
  const slideContainerRef = useRef<HTMLDivElement>(null);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–∞–π–¥–æ–≤
  const slides = [
    {
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LifeSprint',
      description: '–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É –≤—Å–µ–≥–æ 7 –¥–Ω–µ–π.',
      image: 'üöÄ',
    },
    {
      title: '–†–∞–∑–≤–∏–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏',
      description: '–ù–∞—É—á–∏—Å—å –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏, –ø–æ–≤—ã—Å—å –Ω–∞–≤—ã–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
      image: 'üß†',
    },
    {
      title: '–ß—Ç–æ –∂, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!',
      description: '–í—Å–µ–≥–æ –∑–∞ 31 –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏ —Å–≤–æ—é –∂–∏–∑–Ω—å. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É?',
      image: 'üèÜ',
    },
  ];
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–≤–∞–π–ø–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å–ª–∞–π–¥–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
  const minSwipeDistance = 50;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–∞
  const onTouchStart = (e: React.TouchEvent) => {
    setTouchEnd(null);
    setTouchStart(e.targetTouches[0].clientX);
  };
  
  const onTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };
  
  const onTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
    
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > minSwipeDistance;
    const isRightSwipe = distance < -minSwipeDistance;
    
    // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
    if (isLeftSwipe && currentSlide < slides.length - 1) {
      nextSlide();
    }
    // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
    else if (isRightSwipe && currentSlide > 0) {
      prevSlide();
    }
  };
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–ª–∞–π–¥–∞–º–∏
  useEffect(() => {
    if (slideContainerRef.current) {
      slideContainerRef.current.style.opacity = '0';
      slideContainerRef.current.style.transform = 'translateY(10px)';
      
      const timer = setTimeout(() => {
        if (slideContainerRef.current) {
          slideContainerRef.current.style.opacity = '1';
          slideContainerRef.current.style.transform = 'translateY(0)';
        }
      }, 50);
      
      return () => clearTimeout(timer);
    }
  }, [currentSlide]);
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É
  const nextSlide = () => {
    if (currentSlide < slides.length - 1) {
      setCurrentSlide(currentSlide + 1);
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      navigate('/');
    }
  };
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–∞–π–¥—É
  const prevSlide = () => {
    if (currentSlide > 0) {
      setCurrentSlide(currentSlide - 1);
    }
  };
  
  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ª–∞–π–¥—ã
  const skipOnboarding = () => {
    navigate('/');
  };
  
  return (
    <div 
      className="onboarding-page min-h-screen bg-background-light dark:bg-background-dark flex flex-col"
      onTouchStart={onTouchStart}
      onTouchMove={onTouchMove}
      onTouchEnd={onTouchEnd}
    >
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
      <div className="fixed top-0 left-0 right-0 flex justify-center p-4 pt-8 safe-area-inset-top">
        <div className="flex space-x-3">
          {slides.map((_, index) => (
            <div
              key={index}
              className={`w-2.5 h-2.5 rounded-full transition-all duration-300 ${
                index === currentSlide ? 'bg-primary w-4' : 'bg-gray-300 dark:bg-gray-600'
              }`}
            />
          ))}
        </div>
      </div>
      
      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∞–π–¥–∞ */}
      <div 
        ref={slideContainerRef}
        className="flex-1 flex flex-col items-center justify-center px-6 py-12 text-center transition-all duration-300 ease-in-out"
      >
        <div className="text-8xl mb-10 transform transition-transform duration-500 hover:scale-110">
          {slides[currentSlide].image}
        </div>
        <h1 className="text-2xl sm:text-3xl font-bold mb-6">{slides[currentSlide].title}</h1>
        <p className="text-lg text-text-light-light dark:text-text-light-dark mb-12 max-w-md mx-auto leading-relaxed">
          {slides[currentSlide].description}
        </p>
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
      <div className="p-6 pb-10 safe-area-inset-bottom">
        <div className="flex justify-between items-center mb-6 gap-4">
          {currentSlide > 0 ? (
            <Button variant="outline" onClick={prevSlide} size="lg" className="flex-1">
              –ù–∞–∑–∞–¥
            </Button>
          ) : (
            <div className="flex-1"></div> // –ü—É—Å—Ç–æ–π div –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
          )}
          
          <Button variant="primary" onClick={nextSlide} size="lg" className="flex-1">
            {currentSlide < slides.length - 1 ? '–î–∞–ª–µ–µ' : '–ù–∞—á–∞—Ç—å'}
          </Button>
        </div>
        
        {currentSlide < slides.length - 1 && (
          <div className="text-center">
            <button
              onClick={skipOnboarding}
              className="text-text-light-light dark:text-text-light-dark hover:underline focus:outline-none py-4 px-6 text-base min-h-[44px] w-full"
            >
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default OnboardingPage;
